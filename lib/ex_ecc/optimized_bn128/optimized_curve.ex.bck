defmodule ExEcc.OptimizedBN128.OptimizedCurve do
  alias ExEcc.Fields.OptimizedBN128FQ, as: FQ
  alias ExEcc.Fields.OptimizedBN128FQ2, as: FQ2
  alias ExEcc.Fields.OptimizedBN128FQ12, as: FQ12
  alias ExEcc.Fields.OptimizedFieldElements.FQP
  alias ExEcc.FieldMath

  @field_modulus 21_888_242_871_839_275_222_246_405_745_257_275_088_548_364_400_416_034_343_698_204_186_575_808_495_617
  def field_modulus, do: @field_modulus

  @curve_order 21_888_242_871_839_275_222_246_405_745_257_275_088_548_364_400_416_034_343_698_204_186_575_808_495_617
  def curve_order, do: @curve_order

  # Curve is y**2 = x**3 + 3
  @b FQ.new(3)
  def b, do: @b

  # Twisted curve over FQ**2
  @b2 FieldMath.div(FQ2.new({3, 0}), FQ2.new({9, 1}))
  def b2, do: @b2

  # Extension curve over FQ**12; same b value as over FQ
  @b12 FQ12.new(List.to_tuple([3 | List.duplicate(0, 11)]))
  def b12, do: @b12

  # Generator for curve over FQ
  @g1 {FQ.new(1), FQ.new(2), FQ.new(1)}
  def g1, do: @g1

  # Generator for twisted curve over FQ2
  @g2 {
    FQ2.new({
      108_570_469_990_230_571_359_445_707_622_328_294_813_707_563_595_785_180_869_905_199_932_856_558_527_81,
      115_597_320_329_863_871_079_910_040_213_922_857_839_258_128_618_211_925_309_174_031_514_523_918_056_34
    }),
    FQ2.new({
      8_495_653_923_123_431_417_604_973_247_489_272_438_418_190_587_263_600_148_770_280_649_306_958_101_930,
      4_082_367_875_863_433_681_332_203_403_145_435_568_316_851_327_593_401_208_105_741_076_214_120_093_531
    }),
    FQ2.one()
  }
  def g2, do: @g2

  # Point at infinity over FQ
  @z1 {FQ.one(), FQ.one(), FQ.zero()}
  def z1, do: @z1

  # Point at infinity for twisted curve over FQ2
  @z2 {FQ2.one(), FQ2.one(), FQ2.zero()}
  def z2, do: @z2

  # Check if a point is the point at infinity
  def is_inf(pt) do
    {x, y, z} = pt
    FieldMath.eq(z, FieldMath.type(z).zero())
  end

  # Check that a point is on the curve defined by y**2 == x**3 + b
  def is_on_curve(pt, b_val) do
    if is_inf(pt) do
      true
    else
      {x, y, z} = pt
      a = FieldMath.sub(FieldMath.mul(FieldMath.pow(y, 2), z), FieldMath.pow(x, 3))
      b = FieldMath.mul(b_val, FieldMath.pow(z, 3))
      FieldMath.eq(a, b)
    end
  end

  # Double a point on the curve
  def double(pt) do
    {x, y, z} = pt
    w = FieldMath.mul(3, FieldMath.mul(x, x))
    s = FieldMath.mul(y, z)
    b = FieldMath.mul(x, y, s)
    h = FieldMath.sub(FieldMath.mul(w, w), FieldMath.mul(8, b))
    s_squared = FieldMath.mul(s, s)
    newx = FieldMath.mul(2, FieldMath.mul(h, s))

    newy =
      FieldMath.sub(
        FieldMath.sub(
          FieldMath.mul(w, FieldMath.sub(FieldMath.mul(4, b), h)),
          FieldMath.mul(8, FieldMath.mul(y, y, s_squared))
        ),
        s_squared
      )

    newz = FieldMath.mul(8, s, s_squared)
    {newx, newy, newz}
  end

  # Elliptic curve addition
  def add(p1, p2) do
    {x1, y1, z1} = p1
    {x2, y2, z2} = p2
    {one, zero} = {FieldMath.type(x1).one(), FieldMath.type(x1).zero()}

    if FieldMath.eq(z1, zero) or FieldMath.eq(z2, zero) do
      if FieldMath.eq(z2, zero) do
        p1
      else
        p2
      end
    else
      u1 = FieldMath.mul(y2, z1)
      u2 = FieldMath.mul(y1, z2)
      v1 = FieldMath.mul(x2, z1)
      v2 = FieldMath.mul(x1, z2)

      cond do
        FieldMath.eq(v1, v2) and FieldMath.eq(u1, u2) ->
          double(p1)

        FieldMath.eq(v1, v2) ->
          {one, one, zero}

        true ->
          u = FieldMath.sub(u1, u2)
          v = FieldMath.sub(v1, v2)
          v_squared = FieldMath.mul(v, v)
          v_squared_times_v2 = FieldMath.mul(v_squared, v2)
          v_cubed = FieldMath.mul(v, v_squared)
          w = FieldMath.mul(z1, z2)

          a =
            FieldMath.sub(
              FieldMath.sub(FieldMath.mul(u, u), v_cubed),
              FieldMath.mul(2, v_squared_times_v2)
            )

          newx = FieldMath.mul(v, a)

          newy =
            FieldMath.sub(
              FieldMath.sub(
                FieldMath.mul(u, FieldMath.sub(v_squared_times_v2, a)),
                FieldMath.mul(v_cubed, u2)
              ),
              u2
            )

          newz = FieldMath.mul(v_cubed, w)
          {newx, newy, newz}
      end
    end
  end

  # Elliptic curve point multiplication
  def multiply(pt, n) do
    {x, y, z} = pt

    cond do
      n == 0 -> {FieldMath.type(x).one(), FieldMath.type(x).one(), FieldMath.type(x).zero()}
      n == 1 -> pt
      not rem(n, 2) -> multiply(double(pt), div(n, 2))
      true -> add(multiply(double(pt), div(n, 2)), pt)
    end
  end

  def eq(p1, p2) do
    {x1, y1, z1} = p1
    {x2, y2, z2} = p2

    FieldMath.eq(FieldMath.mul(x1, z2), FieldMath.mul(x2, z1)) and
      FieldMath.eq(FieldMath.mul(y1, z2), FieldMath.mul(y2, z1))
  end

  def normalize(pt) do
    {x, y, z} = pt
    {FieldMath.div(x, z), FieldMath.div(y, z)}
  end

  @w FQ12.new(List.to_tuple([0, 1] ++ List.duplicate(0, 10)))
  def w, do: @w

  def neg(pt) do
    {x, y, z} = pt
    {x, FieldMath.neg(y), z}
  end

  def twist(pt) do
    {x, y, z} = pt

    xcoeffs = [FieldMath.coeffs(x, 0) - FieldMath.coeffs(x, 1) * 9, FieldMath.coeffs(x, 1)]
    ycoeffs = [FieldMath.coeffs(y, 0) - FieldMath.coeffs(y, 1) * 9, FieldMath.coeffs(y, 1)]
    zcoeffs = [FieldMath.coeffs(z, 0) - FieldMath.coeffs(z, 1) * 9, FieldMath.coeffs(z, 1)]

    nx =
      {List.first(xcoeffs), 0, 0, 0, 0, 0, List.last(xcoeffs), 0, 0, 0, 0, 0}
      |> FQ12.new()

    ny =
      {List.first(ycoeffs), 0, 0, 0, 0, 0, List.last(ycoeffs), 0, 0, 0, 0, 0}
      |> FQ12.new()

    nz =
      {List.first(zcoeffs), 0, 0, 0, 0, 0, List.last(zcoeffs), 0, 0, 0, 0, 0}
      |> FQ12.new()

    {FieldMath.mul(nx, FieldMath.pow(@w, 2)), FieldMath.mul(ny, FieldMath.pow(@w, 3)), nz}
  end

  def g12 do
    twist(@g2)
  end
end
